From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aaron <bauhd@gmx.net>
Date: Sun, 16 Jun 2024 03:06:08 +0200
Subject: [PATCH] replace ChunkPos with long


diff --git a/src/main/java/com/infernalsuite/asp/AdvancedSlimePaper.java b/src/main/java/com/infernalsuite/asp/AdvancedSlimePaper.java
index 06e91530198d9075434045893f95f7a6ae5bfbb3..7741a210ad71a66846cdae636917e1a89ac35c8d 100644
--- a/src/main/java/com/infernalsuite/asp/AdvancedSlimePaper.java
+++ b/src/main/java/com/infernalsuite/asp/AdvancedSlimePaper.java
@@ -15,6 +15,7 @@ import com.infernalsuite.asp.serialization.slime.SlimeSerializer;
 import com.infernalsuite.asp.serialization.slime.reader.SlimeWorldReaderRegistry;
 import com.infernalsuite.asp.skeleton.SkeletonSlimeWorld;
 import com.infernalsuite.asp.util.NmsUtil;
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import net.minecraft.server.level.ServerLevel;
 import org.bukkit.Bukkit;
 import org.bukkit.World;
@@ -166,7 +167,7 @@ public class AdvancedSlimePaper implements AdvancedSlimePaperAPI {
         Objects.requireNonNull(worldName, "World name cannot be null");
         Objects.requireNonNull(propertyMap, "Properties cannot be null");
 
-        return new SkeletonSlimeWorld(worldName, loader, readOnly, Map.of(), new ConcurrentHashMap<>(), propertyMap, BRIDGE_INSTANCE.getCurrentVersion());
+        return new SkeletonSlimeWorld(worldName, loader, readOnly, new Long2ObjectOpenHashMap<>(0), new ConcurrentHashMap<>(), propertyMap, BRIDGE_INSTANCE.getCurrentVersion());
     }
 
     @Override
diff --git a/src/main/java/com/infernalsuite/asp/SimpleDataFixerConverter.java b/src/main/java/com/infernalsuite/asp/SimpleDataFixerConverter.java
index ec45c627df14a87087e39556cb90eb2d5b52a981..4fe388f4e7edc7a9207147f6cb610d0cc53d9e1e 100644
--- a/src/main/java/com/infernalsuite/asp/SimpleDataFixerConverter.java
+++ b/src/main/java/com/infernalsuite/asp/SimpleDataFixerConverter.java
@@ -12,10 +12,11 @@ import com.infernalsuite.asp.api.world.SlimeChunk;
 import com.infernalsuite.asp.api.world.SlimeChunkSection;
 import com.infernalsuite.asp.api.world.SlimeWorld;
 import net.kyori.adventure.nbt.CompoundBinaryTag;
+import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import net.minecraft.SharedConstants;
 
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.List;
 import java.util.function.Consumer;
 
@@ -33,7 +34,7 @@ class SimpleDataFixerConverter implements SlimeWorldReader<SlimeWorld> {
         long encodedNewVersion = DataConverter.encodeVersions(newVersion, Integer.MAX_VALUE);
         long encodedCurrentVersion = DataConverter.encodeVersions(currentVersion, Integer.MAX_VALUE);
 
-        Map<com.infernalsuite.asp.ChunkPos, SlimeChunk> chunks = new HashMap<>();
+        Long2ObjectMap<SlimeChunk> chunks = new Long2ObjectOpenHashMap<>();
         for (SlimeChunk chunk : data.getChunkStorage()) {
             List<CompoundBinaryTag> entities = new ArrayList<>();
             List<CompoundBinaryTag> blockEntities = new ArrayList<>();
@@ -48,7 +49,7 @@ class SimpleDataFixerConverter implements SlimeWorldReader<SlimeWorld> {
                 );
             }
 
-            ChunkPos chunkPos = new ChunkPos(chunk.getX(), chunk.getZ());
+            long chunkPos = Util.chunkPosition(chunk.getX(), chunk.getZ());
 
             SlimeChunkSection[] sections = new SlimeChunkSection[chunk.getSections().length];
             for (int i = 0; i < sections.length; i++) {
diff --git a/src/main/java/com/infernalsuite/asp/level/SlimeInMemoryWorld.java b/src/main/java/com/infernalsuite/asp/level/SlimeInMemoryWorld.java
index 9655bd071f435d8b33a78350abb804cafc77306f..e6da199bf2179d8820c6e38725cea5f867031f15 100644
--- a/src/main/java/com/infernalsuite/asp/level/SlimeInMemoryWorld.java
+++ b/src/main/java/com/infernalsuite/asp/level/SlimeInMemoryWorld.java
@@ -1,7 +1,7 @@
 package com.infernalsuite.asp.level;
 
-import com.infernalsuite.asp.ChunkPos;
 import com.infernalsuite.asp.Converter;
+import com.infernalsuite.asp.Util;
 import com.infernalsuite.asp.api.exceptions.WorldAlreadyExistsException;
 import com.infernalsuite.asp.api.loaders.SlimeLoader;
 import com.infernalsuite.asp.pdc.AdventurePersistentDataContainer;
@@ -15,6 +15,8 @@ import com.infernalsuite.asp.api.world.SlimeWorldInstance;
 import com.infernalsuite.asp.api.world.properties.SlimePropertyMap;
 import net.kyori.adventure.nbt.BinaryTag;
 import net.kyori.adventure.nbt.CompoundBinaryTag;
+import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.UpgradeData;
@@ -27,9 +29,7 @@ import org.jetbrains.annotations.NotNull;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
 import java.util.concurrent.ConcurrentMap;
 
 /*
@@ -47,7 +47,7 @@ public class SlimeInMemoryWorld implements SlimeWorld, SlimeWorldInstance {
     private final SlimePropertyMap propertyMap;
     private final SlimeLoader loader;
 
-    private final Map<ChunkPos, SlimeChunk> chunkStorage = new HashMap<>();
+    private final Long2ObjectMap<SlimeChunk> chunkStorage = new Long2ObjectOpenHashMap<>();
     private boolean readOnly;
     // private final Map<ChunkPos, List<CompoundTag>> entityStorage = new HashMap<>();
 
@@ -59,7 +59,7 @@ public class SlimeInMemoryWorld implements SlimeWorld, SlimeWorldInstance {
         this.readOnly = bootstrap.initial().isReadOnly();
 
         for (SlimeChunk initial : bootstrap.initial().getChunkStorage()) {
-            ChunkPos pos = new ChunkPos(initial.getX(), initial.getZ());
+            long pos = Util.chunkPosition(initial.getX(), initial.getZ());
             List<CompoundBinaryTag> tags = new ArrayList<>(initial.getEntities());
 
             //  this.entityStorage.put(pos, tags);
@@ -96,7 +96,7 @@ public class SlimeInMemoryWorld implements SlimeWorld, SlimeWorldInstance {
             levelChunk = SlimeChunkConverter.deserializeSlimeChunk(this.instance, chunk);
             chunk = new SafeNmsChunkWrapper(new NMSSlimeChunk(levelChunk, chunk), chunk);
         }
-        this.chunkStorage.put(new ChunkPos(x, z), chunk);
+        this.chunkStorage.put(Util.chunkPosition(x, z), chunk);
 
         return levelChunk;
     }
@@ -110,18 +110,18 @@ public class SlimeInMemoryWorld implements SlimeWorld, SlimeWorldInstance {
         SlimeChunk chunk = new NMSSlimeChunk(providedChunk, getChunk(x, z));
 
         if (FastChunkPruner.canBePruned(this.liveWorld, providedChunk)) {
-            this.chunkStorage.remove(new ChunkPos(x, z));
+            this.chunkStorage.remove(Util.chunkPosition(x, z));
             return;
         }
 
-        this.chunkStorage.put(new ChunkPos(x, z),
+        this.chunkStorage.put(Util.chunkPosition(x, z),
                 new SlimeChunkSkeleton(chunk.getX(), chunk.getZ(), chunk.getSections(),
                         chunk.getHeightMaps(), chunk.getTileEntities(), chunk.getEntities(), chunk.getExtraData(), null));
     }
 
     @Override
     public SlimeChunk getChunk(int x, int z) {
-        return this.chunkStorage.get(new ChunkPos(x, z));
+        return this.chunkStorage.get(Util.chunkPosition(x, z));
     }
 
     @Override
@@ -203,8 +203,8 @@ public class SlimeInMemoryWorld implements SlimeWorld, SlimeWorldInstance {
     public SlimeWorld getForSerialization() {
         SlimeWorld world = SkeletonCloning.weakCopy(this);
 
-        Map<ChunkPos, SlimeChunk> cloned = new HashMap<>();
-        for (Map.Entry<ChunkPos, SlimeChunk> entry : this.chunkStorage.entrySet()) {
+        Long2ObjectMap<SlimeChunk> cloned = new Long2ObjectOpenHashMap<>();
+        for (Long2ObjectMap.Entry<SlimeChunk> entry : this.chunkStorage.long2ObjectEntrySet()) {
             SlimeChunk clonedChunk = entry.getValue();
             // NMS "live" chunks need to be converted
             {
@@ -242,7 +242,7 @@ public class SlimeInMemoryWorld implements SlimeWorld, SlimeWorldInstance {
                 }
             }
 
-            cloned.put(entry.getKey(), clonedChunk);
+            cloned.put(entry.getLongKey(), clonedChunk);
         }
 
         // Serialize Bukkit Values (PDC)
@@ -275,8 +275,8 @@ public class SlimeInMemoryWorld implements SlimeWorld, SlimeWorldInstance {
     }
 
     public void ensureChunkMarkedAsLoaded(SlimeChunkLevel chunk) {
-        if (chunkStorage.get(new ChunkPos(chunk.locX, chunk.locZ)) instanceof SlimeChunkSkeleton skeleton) {
-            chunkStorage.put(new ChunkPos(chunk.locX, chunk.locZ), new NMSSlimeChunk(chunk, skeleton));
+        if (chunkStorage.get(Util.chunkPosition(chunk.locX, chunk.locZ)) instanceof SlimeChunkSkeleton skeleton) {
+            chunkStorage.put(Util.chunkPosition(chunk.locX, chunk.locZ), new NMSSlimeChunk(chunk, skeleton));
         }
     }
 }
