From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: kyngs <kyngs@users.noreply.github.com>
Date: Tue, 19 Dec 2023 21:47:15 +0100
Subject: [PATCH] Add v12, chunk pdc and extra nbt. Fix double compression on
 tile entities and entities. Fix horrible bug which made chunks go poof.


diff --git a/src/main/java/com/infernalsuite/asp/SimpleDataFixerConverter.java b/src/main/java/com/infernalsuite/asp/SimpleDataFixerConverter.java
index 6856a7254685b2d005bcb2a91841f53d8743e38d..de83872d147e790cb0fb98f1a407a22927faed28 100644
--- a/src/main/java/com/infernalsuite/asp/SimpleDataFixerConverter.java
+++ b/src/main/java/com/infernalsuite/asp/SimpleDataFixerConverter.java
@@ -69,11 +69,12 @@ class SimpleDataFixerConverter implements SlimeWorldReader<SlimeWorld> {
 
             chunks.put(chunkPos, new SlimeChunkSkeleton(
                     chunk.getX(),
-                    chunk.getX(),
+                    chunk.getZ(),
                     sections,
                     chunk.getHeightMaps(),
                     blockEntities,
-                    entities
+                    entities,
+                    chunk.getExtraData()
             ));
 
         }
diff --git a/src/main/java/com/infernalsuite/asp/level/NMSSlimeChunk.java b/src/main/java/com/infernalsuite/asp/level/NMSSlimeChunk.java
index beb56b2495a52e1fac815de664677d73ce2bbcc3..33c0379c6ac41938296643a294ea362a96e3a5ea 100644
--- a/src/main/java/com/infernalsuite/asp/level/NMSSlimeChunk.java
+++ b/src/main/java/com/infernalsuite/asp/level/NMSSlimeChunk.java
@@ -67,9 +67,11 @@ public class NMSSlimeChunk implements SlimeChunk {
     }
 
     private LevelChunk chunk;
+    private CompoundBinaryTag extra;
 
-    public NMSSlimeChunk(LevelChunk chunk) {
+    public NMSSlimeChunk(LevelChunk chunk, SlimeChunk reference) {
         this.chunk = chunk;
+        this.extra = reference == null ? CompoundBinaryTag.empty() : reference.getExtraData();
     }
 
     @Override
@@ -176,6 +178,11 @@ public class NMSSlimeChunk implements SlimeChunk {
         return Lists.transform(entities, Converter::convertTag);
     }
 
+    @Override
+    public CompoundBinaryTag getExtraData() {
+        return extra;
+    }
+
     public LevelChunk getChunk() {
         return chunk;
     }
@@ -184,4 +191,4 @@ public class NMSSlimeChunk implements SlimeChunk {
         this.chunk = chunk;
     }
 
-}
\ No newline at end of file
+}
diff --git a/src/main/java/com/infernalsuite/asp/level/NMSSlimeWorld.java b/src/main/java/com/infernalsuite/asp/level/NMSSlimeWorld.java
index 25249743caca6f354005d7f9e4498fdf413df629..8cd79bf34a9074d06d342f956165891613ae6cf0 100644
--- a/src/main/java/com/infernalsuite/asp/level/NMSSlimeWorld.java
+++ b/src/main/java/com/infernalsuite/asp/level/NMSSlimeWorld.java
@@ -47,14 +47,14 @@ public class NMSSlimeWorld implements SlimeWorld {
             return null;
         }
 
-        return new NMSSlimeChunk(chunk);
+        return new NMSSlimeChunk(chunk, memoryWorld.getChunk(x, z));
     }
 
     @Override
     public Collection<SlimeChunk> getChunkStorage() {
         List<ChunkHolder> chunks = io.papermc.paper.chunk.system.ChunkSystem.getVisibleChunkHolders(this.instance); // Paper
         return chunks.stream().map(ChunkHolder::getFullChunkNow).filter(Objects::nonNull)
-                .map(NMSSlimeChunk::new)
+                .map((chunkLevel) -> new NMSSlimeChunk(chunkLevel, memoryWorld.getChunk(chunkLevel.getPos().x, chunkLevel.getPos().z))) // This sucks, is there a better way?
                 .collect(Collectors.toList());
     }
 
diff --git a/src/main/java/com/infernalsuite/asp/level/SafeNmsChunkWrapper.java b/src/main/java/com/infernalsuite/asp/level/SafeNmsChunkWrapper.java
index fa8254ca4b2eafa4e5669c3e0467ed1f7d4dc159..4ca8d6f40b1e5e7e0f106a6880eaf8afc1128213 100644
--- a/src/main/java/com/infernalsuite/asp/level/SafeNmsChunkWrapper.java
+++ b/src/main/java/com/infernalsuite/asp/level/SafeNmsChunkWrapper.java
@@ -62,6 +62,15 @@ public class SafeNmsChunkWrapper implements SlimeChunk {
         return this.wrapper.getEntities();
     }
 
+    @Override
+    public CompoundBinaryTag getExtraData() {
+        if (shouldDefaultBackToSlimeChunk()) {
+            return this.safety.getExtraData();
+        }
+
+        return this.wrapper.getExtraData();
+    }
+
     /*
 Slime chunks can still be requested but not actually loaded, this caused
 some things to not properly save because they are not "loaded" into the chunk.
diff --git a/src/main/java/com/infernalsuite/asp/level/SlimeChunkConverter.java b/src/main/java/com/infernalsuite/asp/level/SlimeChunkConverter.java
index b705b3133634c3696dee766cbfc95380293ccda3..05e520256b3d047a85b98552883044ca6b658b3d 100644
--- a/src/main/java/com/infernalsuite/asp/level/SlimeChunkConverter.java
+++ b/src/main/java/com/infernalsuite/asp/level/SlimeChunkConverter.java
@@ -162,6 +162,13 @@ public class SlimeChunkConverter {
             Heightmap.primeHeightmaps(nmsChunk, unsetHeightMaps);
         }
 
+        net.minecraft.nbt.CompoundTag nmsExtraData = (net.minecraft.nbt.CompoundTag) Converter.convertTag(chunk.getExtraData());
+
+        // Attempt to read PDC from the extra tag
+        if (nmsExtraData.get("ChunkBukkitValues") != null) {
+            nmsChunk.persistentDataContainer.putAll(nmsExtraData.getCompound("ChunkBukkitValues"));
+        }
+
         return nmsChunk;
     }
 }
diff --git a/src/main/java/com/infernalsuite/asp/level/SlimeInMemoryWorld.java b/src/main/java/com/infernalsuite/asp/level/SlimeInMemoryWorld.java
index 70787a7b87a0ebb4d47de7d110fadc8952708c58..58b54839576b92e87f6941ab2457c0c0c5469df8 100644
--- a/src/main/java/com/infernalsuite/asp/level/SlimeInMemoryWorld.java
+++ b/src/main/java/com/infernalsuite/asp/level/SlimeInMemoryWorld.java
@@ -90,11 +90,11 @@ public class SlimeInMemoryWorld implements SlimeWorld, SlimeWorldInstance {
             levelChunk = new SlimeChunkLevel(this.instance, pos, UpgradeData.EMPTY, blockLevelChunkTicks, fluidLevelChunkTicks,
                     0L, null, null, null);
 
-            chunk = new NMSSlimeChunk(levelChunk);
+            chunk = new NMSSlimeChunk(levelChunk, getChunk(x, z));
 
         } else {
             levelChunk = SlimeChunkConverter.deserializeSlimeChunk(this.instance, chunk);
-            chunk = new SafeNmsChunkWrapper(new NMSSlimeChunk(levelChunk), chunk);
+            chunk = new SafeNmsChunkWrapper(new NMSSlimeChunk(levelChunk, chunk), chunk);
         }
         this.chunkStorage.put(new ChunkPos(x, z), chunk);
 
@@ -107,7 +107,7 @@ public class SlimeInMemoryWorld implements SlimeWorld, SlimeWorldInstance {
         final int x = providedChunk.locX;
         final int z = providedChunk.locZ;
 
-        SlimeChunk chunk = new NMSSlimeChunk(providedChunk);
+        SlimeChunk chunk = new NMSSlimeChunk(providedChunk, getChunk(x, z));
 
         if (FastChunkPruner.canBePruned(this.liveWorld, providedChunk)) {
             this.chunkStorage.remove(new ChunkPos(x, z));
@@ -116,7 +116,7 @@ public class SlimeInMemoryWorld implements SlimeWorld, SlimeWorldInstance {
 
         this.chunkStorage.put(new ChunkPos(x, z),
                 new SlimeChunkSkeleton(chunk.getX(), chunk.getZ(), chunk.getSections(),
-                        chunk.getHeightMaps(), chunk.getTileEntities(), chunk.getEntities()));
+                        chunk.getHeightMaps(), chunk.getTileEntities(), chunk.getEntities(), chunk.getExtraData()));
     }
 
     @Override
@@ -229,13 +229,19 @@ public class SlimeInMemoryWorld implements SlimeWorld, SlimeWorldInstance {
                         continue;
                     }
 
+                    // Serialize Bukkit Values (PDC)
+
+                    CompoundBinaryTag adventureTag = Converter.convertTag(chunk.persistentDataContainer.toTagCompound());
+                    clonedChunk.getExtraData().put("ChunkBukkitValues", adventureTag);
+
                     clonedChunk = new SlimeChunkSkeleton(
                             clonedChunk.getX(),
                             clonedChunk.getZ(),
                             clonedChunk.getSections(),
                             clonedChunk.getHeightMaps(),
                             clonedChunk.getTileEntities(),
-                            clonedChunk.getEntities()
+                            clonedChunk.getEntities(),
+                            clonedChunk.getExtraData()
                     );
                 }
             }
diff --git a/src/main/java/com/infernalsuite/asp/level/SlimeLevelInstance.java b/src/main/java/com/infernalsuite/asp/level/SlimeLevelInstance.java
index b8d789c93f7fef253d6ab0c35dcee37460f275eb..5e3426a632d471aff38de29645fdee291c4931ae 100644
--- a/src/main/java/com/infernalsuite/asp/level/SlimeLevelInstance.java
+++ b/src/main/java/com/infernalsuite/asp/level/SlimeLevelInstance.java
@@ -151,9 +151,7 @@ public class SlimeLevelInstance extends ServerLevel {
             Bukkit.getLogger().log(Level.INFO, "Saving world " + this.slimeInstance.getName() + "...");
             long start = System.currentTimeMillis();
 
-            Bukkit.getLogger().log(Level.INFO, "CONVERTING NMS -> SKELETON");
             SlimeWorld world = this.slimeInstance.getForSerialization();
-            Bukkit.getLogger().log(Level.INFO, "CONVERTED TO SKELETON, PUSHING OFF-THREAD");
             return WORLD_SAVER_SERVICE.submit(() -> {
                 try {
                     byte[] serializedWorld = SlimeSerializer.serialize(world);
