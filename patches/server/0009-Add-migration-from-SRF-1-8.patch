From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: kyngs <kyngs@users.noreply.github.com>
Date: Sat, 6 Jan 2024 22:23:55 +0100
Subject: [PATCH] Add migration from SRF 1-8


diff --git a/src/main/java/com/infernalsuite/asp/SimpleDataFixerConverter.java b/src/main/java/com/infernalsuite/asp/SimpleDataFixerConverter.java
index de83872d147e790cb0fb98f1a407a22927faed28..ec45c627df14a87087e39556cb90eb2d5b52a981 100644
--- a/src/main/java/com/infernalsuite/asp/SimpleDataFixerConverter.java
+++ b/src/main/java/com/infernalsuite/asp/SimpleDataFixerConverter.java
@@ -1,5 +1,6 @@
 package com.infernalsuite.asp;
 
+import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.minecraft.walkers.generic.WalkerUtils;
 import ca.spottedleaf.dataconverter.types.nbt.NBTMapType;
@@ -29,18 +30,21 @@ class SimpleDataFixerConverter implements SlimeWorldReader<SlimeWorld> {
             return data;
         }
 
+        long encodedNewVersion = DataConverter.encodeVersions(newVersion, Integer.MAX_VALUE);
+        long encodedCurrentVersion = DataConverter.encodeVersions(currentVersion, Integer.MAX_VALUE);
+
         Map<com.infernalsuite.asp.ChunkPos, SlimeChunk> chunks = new HashMap<>();
         for (SlimeChunk chunk : data.getChunkStorage()) {
             List<CompoundBinaryTag> entities = new ArrayList<>();
             List<CompoundBinaryTag> blockEntities = new ArrayList<>();
             for (CompoundBinaryTag upgradeEntity : chunk.getTileEntities()) {
                 blockEntities.add(
-                        convertAndBack(upgradeEntity, (tag) -> MCTypeRegistry.TILE_ENTITY.convert(new NBTMapType(tag), currentVersion, newVersion))
+                        convertAndBack(upgradeEntity, (tag) -> MCTypeRegistry.TILE_ENTITY.convert(new NBTMapType(tag), encodedCurrentVersion, encodedNewVersion))
                 );
             }
             for (CompoundBinaryTag upgradeEntity : chunk.getEntities()) {
                 entities.add(
-                        convertAndBack(upgradeEntity, (tag) -> MCTypeRegistry.ENTITY.convert(new NBTMapType(tag), currentVersion, newVersion))
+                        convertAndBack(upgradeEntity, (tag) -> MCTypeRegistry.ENTITY.convert(new NBTMapType(tag), encodedCurrentVersion, encodedNewVersion))
                 );
             }
 
@@ -52,11 +56,11 @@ class SimpleDataFixerConverter implements SlimeWorldReader<SlimeWorld> {
                 if (dataSection == null) continue;
 
                 CompoundBinaryTag blockStateTag = blockStateTag = convertAndBack(dataSection.getBlockStatesTag(), (tag) -> {
-                    WalkerUtils.convertList(MCTypeRegistry.BLOCK_STATE, new NBTMapType(tag), "palette", currentVersion, newVersion);
+                    WalkerUtils.convertList(MCTypeRegistry.BLOCK_STATE, new NBTMapType(tag), "palette", encodedCurrentVersion, encodedNewVersion);
                 });
 
                 CompoundBinaryTag biomeTag = convertAndBack(dataSection.getBiomeTag(), (tag) -> {
-                    WalkerUtils.convertList(MCTypeRegistry.BIOME, new NBTMapType(tag), "palette", currentVersion, newVersion);
+                    WalkerUtils.convertList(MCTypeRegistry.BIOME, new NBTMapType(tag), "palette", encodedCurrentVersion, encodedNewVersion);
                 });
 
                 sections[i] = new SlimeChunkSectionSkeleton(
@@ -74,7 +78,8 @@ class SimpleDataFixerConverter implements SlimeWorldReader<SlimeWorld> {
                     chunk.getHeightMaps(),
                     blockEntities,
                     entities,
-                    chunk.getExtraData()
+                    chunk.getExtraData(),
+                    chunk.getUpgradeData()
             ));
 
         }
diff --git a/src/main/java/com/infernalsuite/asp/SlimeNMSBridgeImpl.java b/src/main/java/com/infernalsuite/asp/SlimeNMSBridgeImpl.java
index 7b702b41a1bc589bf405ea280b8fc1c744012081..95b4d139125f18414638c2b17266c6400a62bcf5 100644
--- a/src/main/java/com/infernalsuite/asp/SlimeNMSBridgeImpl.java
+++ b/src/main/java/com/infernalsuite/asp/SlimeNMSBridgeImpl.java
@@ -1,5 +1,8 @@
 package com.infernalsuite.asp;
 
+import ca.spottedleaf.dataconverter.converters.DataConverter;
+import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
+import ca.spottedleaf.dataconverter.types.nbt.NBTMapType;
 import com.infernalsuite.asp.api.SlimeNMSBridge;
 import com.infernalsuite.asp.api.world.SlimeWorld;
 import com.infernalsuite.asp.api.world.SlimeWorldInstance;
@@ -69,6 +72,20 @@ public class SlimeNMSBridgeImpl implements SlimeNMSBridge {
         return container;
     }
 
+    @Override
+    public CompoundBinaryTag convertChunkTo1_13(CompoundBinaryTag tag) {
+        CompoundTag nmsTag = (CompoundTag) Converter.convertTag(tag);
+
+        int version = nmsTag.getInt("DataVersion");
+
+        long encodedNewVersion = DataConverter.encodeVersions(1624, Integer.MAX_VALUE);
+        long encodedCurrentVersion = DataConverter.encodeVersions(version, Integer.MAX_VALUE);
+
+        MCTypeRegistry.CHUNK.convert(new NBTMapType(nmsTag), encodedCurrentVersion, encodedNewVersion);
+
+        return Converter.convertTag(nmsTag);
+    }
+
     @Override
     public boolean loadOverworldOverride() {
         if (defaultWorld == null) {
@@ -159,7 +176,6 @@ public class SlimeNMSBridgeImpl implements SlimeNMSBridge {
         return DATA_FIXER_CONVERTER.readFromData(world);
     }
 
-
     @Override
     public int getCurrentVersion() {
         return SharedConstants.getCurrentVersion().getDataVersion().getVersion();
diff --git a/src/main/java/com/infernalsuite/asp/level/NMSSlimeChunk.java b/src/main/java/com/infernalsuite/asp/level/NMSSlimeChunk.java
index 33c0379c6ac41938296643a294ea362a96e3a5ea..4c627f8af92f29d9ba50745812acc83726a85683 100644
--- a/src/main/java/com/infernalsuite/asp/level/NMSSlimeChunk.java
+++ b/src/main/java/com/infernalsuite/asp/level/NMSSlimeChunk.java
@@ -26,10 +26,7 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.chunk.LevelChunk;
-import net.minecraft.world.level.chunk.LevelChunkSection;
-import net.minecraft.world.level.chunk.PalettedContainer;
-import net.minecraft.world.level.chunk.PalettedContainerRO;
+import net.minecraft.world.level.chunk.*;
 import net.minecraft.world.level.chunk.storage.ChunkSerializer;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.lighting.LevelLightEngine;
@@ -67,11 +64,13 @@ public class NMSSlimeChunk implements SlimeChunk {
     }
 
     private LevelChunk chunk;
-    private CompoundBinaryTag extra;
+    private final CompoundBinaryTag extra;
+    private final CompoundBinaryTag upgradeData;
 
     public NMSSlimeChunk(LevelChunk chunk, SlimeChunk reference) {
         this.chunk = chunk;
         this.extra = reference == null ? CompoundBinaryTag.empty() : reference.getExtraData();
+        this.upgradeData = reference == null ? null : reference.getUpgradeData();
     }
 
     @Override
@@ -183,6 +182,11 @@ public class NMSSlimeChunk implements SlimeChunk {
         return extra;
     }
 
+    @Override
+    public CompoundBinaryTag getUpgradeData() {
+        return upgradeData;
+    }
+
     public LevelChunk getChunk() {
         return chunk;
     }
diff --git a/src/main/java/com/infernalsuite/asp/level/SafeNmsChunkWrapper.java b/src/main/java/com/infernalsuite/asp/level/SafeNmsChunkWrapper.java
index 4ca8d6f40b1e5e7e0f106a6880eaf8afc1128213..b29c27424081885f10a93ae064d87871156f1f94 100644
--- a/src/main/java/com/infernalsuite/asp/level/SafeNmsChunkWrapper.java
+++ b/src/main/java/com/infernalsuite/asp/level/SafeNmsChunkWrapper.java
@@ -71,6 +71,15 @@ public class SafeNmsChunkWrapper implements SlimeChunk {
         return this.wrapper.getExtraData();
     }
 
+    @Override
+    public CompoundBinaryTag getUpgradeData() {
+        if (shouldDefaultBackToSlimeChunk()) {
+            return this.safety.getUpgradeData();
+        }
+
+        return this.wrapper.getUpgradeData();
+    }
+
     /*
 Slime chunks can still be requested but not actually loaded, this caused
 some things to not properly save because they are not "loaded" into the chunk.
diff --git a/src/main/java/com/infernalsuite/asp/level/SlimeChunkConverter.java b/src/main/java/com/infernalsuite/asp/level/SlimeChunkConverter.java
index 05e520256b3d047a85b98552883044ca6b658b3d..39e020135d996a4abb40dc6564d6c985e7bfbeda 100644
--- a/src/main/java/com/infernalsuite/asp/level/SlimeChunkConverter.java
+++ b/src/main/java/com/infernalsuite/asp/level/SlimeChunkConverter.java
@@ -116,7 +116,14 @@ public class SlimeChunkConverter {
 
         LevelChunkTicks<Block> blockLevelChunkTicks = new LevelChunkTicks<>();
         LevelChunkTicks<Fluid> fluidLevelChunkTicks = new LevelChunkTicks<>();
-        SlimeChunkLevel nmsChunk = new SlimeChunkLevel(instance, pos, UpgradeData.EMPTY, blockLevelChunkTicks, fluidLevelChunkTicks, 0L, sections, loadEntities, null);
+
+        UpgradeData upgradeData;
+        if (chunk.getUpgradeData() != null) {
+            upgradeData = new UpgradeData((net.minecraft.nbt.CompoundTag) Converter.convertTag(chunk.getUpgradeData()), instance);
+        } else {
+            upgradeData = UpgradeData.EMPTY;
+        }
+        SlimeChunkLevel nmsChunk = new SlimeChunkLevel(instance, pos, upgradeData, blockLevelChunkTicks, fluidLevelChunkTicks, 0L, sections, loadEntities, null);
 
         List<CompoundBinaryTag> tileEntities = chunk.getTileEntities();
 
diff --git a/src/main/java/com/infernalsuite/asp/level/SlimeInMemoryWorld.java b/src/main/java/com/infernalsuite/asp/level/SlimeInMemoryWorld.java
index 58b54839576b92e87f6941ab2457c0c0c5469df8..03d9c9448d7c010f5daf69cabce6bf861ea203aa 100644
--- a/src/main/java/com/infernalsuite/asp/level/SlimeInMemoryWorld.java
+++ b/src/main/java/com/infernalsuite/asp/level/SlimeInMemoryWorld.java
@@ -116,7 +116,7 @@ public class SlimeInMemoryWorld implements SlimeWorld, SlimeWorldInstance {
 
         this.chunkStorage.put(new ChunkPos(x, z),
                 new SlimeChunkSkeleton(chunk.getX(), chunk.getZ(), chunk.getSections(),
-                        chunk.getHeightMaps(), chunk.getTileEntities(), chunk.getEntities(), chunk.getExtraData()));
+                        chunk.getHeightMaps(), chunk.getTileEntities(), chunk.getEntities(), chunk.getExtraData(), null));
     }
 
     @Override
@@ -241,7 +241,8 @@ public class SlimeInMemoryWorld implements SlimeWorld, SlimeWorldInstance {
                             clonedChunk.getHeightMaps(),
                             clonedChunk.getTileEntities(),
                             clonedChunk.getEntities(),
-                            clonedChunk.getExtraData()
+                            clonedChunk.getExtraData(),
+                            clonedChunk.getUpgradeData()
                     );
                 }
             }
