From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: kyngs <kyngs@users.noreply.github.com>
Date: Thu, 26 Oct 2023 14:55:39 +0200
Subject: [PATCH] Make SlimeWorld a PersistentDataHolder


diff --git a/src/main/java/com/infernalsuite/asp/SlimeNMSBridgeImpl.java b/src/main/java/com/infernalsuite/asp/SlimeNMSBridgeImpl.java
index 68240b46ce911674ed288fe559737572fa44de6a..7b702b41a1bc589bf405ea280b8fc1c744012081 100644
--- a/src/main/java/com/infernalsuite/asp/SlimeNMSBridgeImpl.java
+++ b/src/main/java/com/infernalsuite/asp/SlimeNMSBridgeImpl.java
@@ -8,7 +8,7 @@ import com.infernalsuite.asp.level.SlimeBootstrap;
 import com.infernalsuite.asp.level.SlimeInMemoryWorld;
 import com.infernalsuite.asp.level.SlimeLevelInstance;
 import com.mojang.serialization.Lifecycle;
-import net.kyori.adventure.util.Services;
+import net.kyori.adventure.nbt.CompoundBinaryTag;
 import net.minecraft.SharedConstants;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.nbt.CompoundTag;
@@ -30,6 +30,9 @@ import org.apache.logging.log4j.Logger;
 import org.bukkit.Bukkit;
 import org.bukkit.World;
 import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataContainer;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry;
+import org.bukkit.persistence.PersistentDataContainer;
 import org.jetbrains.annotations.Nullable;
 
 import java.io.IOException;
@@ -37,6 +40,7 @@ import java.util.Locale;
 
 public class SlimeNMSBridgeImpl implements SlimeNMSBridge {
 
+    private static final CraftPersistentDataTypeRegistry REGISTRY = new CraftPersistentDataTypeRegistry();
     private static final SimpleDataFixerConverter DATA_FIXER_CONVERTER = new SimpleDataFixerConverter();
 
     private static final Logger LOGGER = LogManager.getLogger("ASP");
@@ -49,6 +53,22 @@ public class SlimeNMSBridgeImpl implements SlimeNMSBridge {
         return (SlimeNMSBridgeImpl) SlimeNMSBridge.instance();
     }
 
+    @Override
+    public void extractCraftPDC(PersistentDataContainer source, CompoundBinaryTag.Builder builder) {
+        if (source instanceof CraftPersistentDataContainer craftPDC) {
+            craftPDC.getRaw().forEach((key, nmsTag) -> builder.put(key, Converter.convertTag(nmsTag)));
+        } else {
+            throw new IllegalArgumentException("PersistentDataContainer is not a CraftPersistentDataContainer");
+        }
+    }
+
+    @Override
+    public PersistentDataContainer extractCompoundMapIntoCraftPDC(CompoundBinaryTag source) {
+        CraftPersistentDataContainer container = new CraftPersistentDataContainer(REGISTRY);
+        source.forEach(entry -> container.put(entry.getKey(), Converter.convertTag(entry.getValue())));
+        return container;
+    }
+
     @Override
     public boolean loadOverworldOverride() {
         if (defaultWorld == null) {
@@ -179,7 +199,7 @@ public class SlimeNMSBridgeImpl implements SlimeNMSBridge {
         // level.setReady(true);
         level.setSpawnSettings(world.getPropertyMap().getValue(SlimeProperties.ALLOW_MONSTERS), world.getPropertyMap().getValue(SlimeProperties.ALLOW_ANIMALS));
 
-        var nmsExtraData = (CompoundTag) Converter.convertTag(world.getExtraData());
+        CompoundTag nmsExtraData = (CompoundTag) Converter.convertTag(CompoundBinaryTag.from(world.getExtraData()));
 
         //Attempt to read PDC
         if (nmsExtraData.get("BukkitValues") != null) level.getWorld().readBukkitValues(nmsExtraData.get("BukkitValues"));
diff --git a/src/main/java/com/infernalsuite/asp/level/NMSSlimeWorld.java b/src/main/java/com/infernalsuite/asp/level/NMSSlimeWorld.java
index 41119f2b0d208718c294076dc3c51f55680b0257..25249743caca6f354005d7f9e4498fdf413df629 100644
--- a/src/main/java/com/infernalsuite/asp/level/NMSSlimeWorld.java
+++ b/src/main/java/com/infernalsuite/asp/level/NMSSlimeWorld.java
@@ -10,6 +10,8 @@ import net.kyori.adventure.nbt.CompoundBinaryTag;
 import net.minecraft.SharedConstants;
 import net.minecraft.server.level.ChunkHolder;
 import net.minecraft.world.level.chunk.LevelChunk;
+import org.bukkit.persistence.PersistentDataContainer;
+import org.jetbrains.annotations.NotNull;
 
 import java.io.IOException;
 import java.util.Collection;
@@ -90,4 +92,9 @@ public class NMSSlimeWorld implements SlimeWorld {
     public int getDataVersion() {
         return SharedConstants.getCurrentVersion().getDataVersion().getVersion();
     }
-}
\ No newline at end of file
+
+    @Override
+    public @NotNull PersistentDataContainer getPersistentDataContainer() {
+        return this.memoryWorld.getPersistentDataContainer();
+    }
+}
diff --git a/src/main/java/com/infernalsuite/asp/level/SlimeInMemoryWorld.java b/src/main/java/com/infernalsuite/asp/level/SlimeInMemoryWorld.java
index 387954aae7ef1a39025a474ab1fe81b7216d8d6c..70787a7b87a0ebb4d47de7d110fadc8952708c58 100644
--- a/src/main/java/com/infernalsuite/asp/level/SlimeInMemoryWorld.java
+++ b/src/main/java/com/infernalsuite/asp/level/SlimeInMemoryWorld.java
@@ -4,6 +4,7 @@ import com.infernalsuite.asp.ChunkPos;
 import com.infernalsuite.asp.Converter;
 import com.infernalsuite.asp.api.exceptions.WorldAlreadyExistsException;
 import com.infernalsuite.asp.api.loaders.SlimeLoader;
+import com.infernalsuite.asp.pdc.AdventurePersistentDataContainer;
 import com.infernalsuite.asp.serialization.slime.SlimeSerializer;
 import com.infernalsuite.asp.skeleton.SkeletonCloning;
 import com.infernalsuite.asp.skeleton.SkeletonSlimeWorld;
@@ -20,6 +21,8 @@ import net.minecraft.world.level.chunk.UpgradeData;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.ticks.LevelChunkTicks;
 import org.bukkit.World;
+import org.bukkit.persistence.PersistentDataContainer;
+import org.jetbrains.annotations.NotNull;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -40,6 +43,7 @@ public class SlimeInMemoryWorld implements SlimeWorld, SlimeWorldInstance {
     private final SlimeWorld liveWorld;
 
     private final ConcurrentMap<String, BinaryTag> extra;
+    private final AdventurePersistentDataContainer extraPDC;
     private final SlimePropertyMap propertyMap;
     private final SlimeLoader loader;
 
@@ -62,6 +66,7 @@ public class SlimeInMemoryWorld implements SlimeWorld, SlimeWorldInstance {
             this.chunkStorage.put(pos, initial);
         }
 
+        this.extraPDC = new AdventurePersistentDataContainer(this.extra);
         this.liveWorld = new NMSSlimeWorld(this);
     }
 
@@ -241,13 +246,12 @@ public class SlimeInMemoryWorld implements SlimeWorld, SlimeWorldInstance {
         // Serialize Bukkit Values (PDC)
 
         var nmsTag = new net.minecraft.nbt.CompoundTag();
-
-        instance.getWorld().storeBukkitValues(nmsTag);
+        this.instance.getWorld().storeBukkitValues(nmsTag);
 
         // Bukkit stores the relevant tag as a tag with the key "BukkitValues" in the tag we supply to it
-        var flowTag = Converter.convertTag("BukkitValues", nmsTag.getCompound("BukkitValues"));
+        var adventureTag = Converter.convertTag(nmsTag.getCompound("BukkitValues"));
 
-        world.getExtraData().getValue().put(flowTag);
+        world.getExtraData().put("BukkitValues", adventureTag);
 
         return new SkeletonSlimeWorld(world.getName(),
                 world.getLoader(),
@@ -262,4 +266,9 @@ public class SlimeInMemoryWorld implements SlimeWorld, SlimeWorldInstance {
     public SlimeLevelInstance getInstance() {
         return instance;
     }
+
+    @Override
+    public @NotNull PersistentDataContainer getPersistentDataContainer() {
+        return this.extraPDC;
+    }
 }
