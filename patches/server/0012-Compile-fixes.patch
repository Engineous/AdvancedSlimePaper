From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AverageGithub <adorjantoto09@gmail.com>
Date: Sat, 4 May 2024 20:18:16 +0200
Subject: [PATCH] Compile fixes


diff --git a/build.gradle.kts b/build.gradle.kts
index f0bfc068301c4a908a5856b7c72e7306adeeb38d..e6414d33e65233836db36040206c32a16b4d10ca 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -29,9 +29,6 @@ dependencies {
     // ASWM start
     implementation(project(":aspaper-api"))
     implementation(project(":core"))
-    implementation("io.papermc.paper:paper-mojangapi:1.20.4-R0.1-SNAPSHOT") {
-        exclude("io.papermc.paper", "paper-api")
-    }
     // ASWM end
     implementation("ca.spottedleaf:concurrentutil:0.0.2") // Paper - Add ConcurrentUtil dependency
     // Paper start
diff --git a/src/main/java/com/infernalsuite/asp/level/NMSSlimeChunk.java b/src/main/java/com/infernalsuite/asp/level/NMSSlimeChunk.java
index 4c627f8af92f29d9ba50745812acc83726a85683..6972d6399628eda41756a98fb54fbe93eb827716 100644
--- a/src/main/java/com/infernalsuite/asp/level/NMSSlimeChunk.java
+++ b/src/main/java/com/infernalsuite/asp/level/NMSSlimeChunk.java
@@ -46,18 +46,14 @@ public class NMSSlimeChunk implements SlimeChunk {
     static {
         {
             PalettedContainer<BlockState> empty = new PalettedContainer<>(Block.BLOCK_STATE_REGISTRY, Blocks.AIR.defaultBlockState(), PalettedContainer.Strategy.SECTION_STATES, null);
-            Tag tag = ChunkSerializer.BLOCK_STATE_CODEC.encodeStart(NbtOps.INSTANCE, empty).getOrThrow(false, (error) -> {
-                throw new AssertionError(error);
-            });
+            Tag tag = ChunkSerializer.BLOCK_STATE_CODEC.encodeStart(NbtOps.INSTANCE, empty).getOrThrow();
 
             EMPTY_BLOCK_STATE_PALETTE = Converter.convertTag(tag);
         }
         {
             Registry<Biome> biomes = net.minecraft.server.MinecraftServer.getServer().registryAccess().registryOrThrow(Registries.BIOME);
             PalettedContainer<Holder<Biome>> empty = new PalettedContainer<>(biomes.asHolderIdMap(), biomes.getHolderOrThrow(Biomes.PLAINS), PalettedContainer.Strategy.SECTION_BIOMES, null);
-            Tag tag = ChunkSerializer.makeBiomeCodec(biomes).encodeStart(NbtOps.INSTANCE, empty).getOrThrow(false, (error) -> {
-                throw new AssertionError(error);
-            });
+            Tag tag = ChunkSerializer.makeBiomeCodec(biomes).encodeStart(NbtOps.INSTANCE, empty).getOrThrow();
 
             EMPTY_BIOME_PALETTE = Converter.convertTag(tag);
         }
@@ -110,7 +106,7 @@ public class NMSSlimeChunk implements SlimeChunk {
             if (section.hasOnlyAir()) {
                 blockStateTag = EMPTY_BLOCK_STATE_PALETTE;
             } else {
-                Tag data = ChunkSerializer.BLOCK_STATE_CODEC.encodeStart(NbtOps.INSTANCE, section.getStates()).getOrThrow(false, System.err::println); // todo error handling
+                Tag data = ChunkSerializer.BLOCK_STATE_CODEC.encodeStart(NbtOps.INSTANCE, section.getStates()).getOrThrow(); // todo error handling
                 blockStateTag = Converter.convertTag(data);
             }
 
@@ -120,7 +116,7 @@ public class NMSSlimeChunk implements SlimeChunk {
             if (biomes.data.palette().getSize() == 1 && biomes.data.palette().maybeHas((h) -> h.is(Biomes.PLAINS))) {
                 biomeTag = EMPTY_BIOME_PALETTE;
             } else {
-                Tag biomeData = codec.encodeStart(NbtOps.INSTANCE, section.getBiomes()).getOrThrow(false, System.err::println); // todo error handling
+                Tag biomeData = codec.encodeStart(NbtOps.INSTANCE, section.getBiomes()).getOrThrow(); // todo error handling
                 biomeTag = Converter.convertTag(biomeData);
             }
 
@@ -148,7 +144,7 @@ public class NMSSlimeChunk implements SlimeChunk {
         List<CompoundTag> tileEntities = new ArrayList<>();
 
         for (BlockEntity entity : this.chunk.blockEntities.values()) {
-            CompoundTag entityNbt = entity.saveWithFullMetadata();
+            CompoundTag entityNbt = entity.saveWithFullMetadata(net.minecraft.server.MinecraftServer.getServer().registryAccess());
             tileEntities.add(entityNbt);
         }
 
diff --git a/src/main/java/com/infernalsuite/asp/level/SlimeChunkConverter.java b/src/main/java/com/infernalsuite/asp/level/SlimeChunkConverter.java
index 39e020135d996a4abb40dc6564d6c985e7bfbeda..9bfb64e022db3bd9ed4d818d69df1f9a955cfa5d 100644
--- a/src/main/java/com/infernalsuite/asp/level/SlimeChunkConverter.java
+++ b/src/main/java/com/infernalsuite/asp/level/SlimeChunkConverter.java
@@ -76,7 +76,7 @@ public class SlimeChunkConverter {
                     DataResult<PalettedContainer<BlockState>> dataresult = ChunkSerializer.BLOCK_STATE_CODEC.parse(NbtOps.INSTANCE, Converter.convertTag(slimeSection.getBlockStatesTag())).promotePartial((s) -> {
                         System.out.println("Recoverable error when parsing section " + x + "," + z + ": " + s); // todo proper logging
                     });
-                    blockPalette = dataresult.getOrThrow(false, System.err::println); // todo proper logging
+                    blockPalette = dataresult.getOrThrow(); // todo proper logging
                 } else {
                     blockPalette = new PalettedContainer<>(Block.BLOCK_STATE_REGISTRY, Blocks.AIR.defaultBlockState(), PalettedContainer.Strategy.SECTION_STATES, null);
                 }
@@ -87,7 +87,7 @@ public class SlimeChunkConverter {
                     DataResult<PalettedContainer<Holder<Biome>>> dataresult = codec.parse(NbtOps.INSTANCE, Converter.convertTag(slimeSection.getBiomeTag())).promotePartial((s) -> {
                         System.out.println("Recoverable error when parsing section " + x + "," + z + ": " + s); // todo proper logging
                     });
-                    biomePalette = dataresult.getOrThrow(false, System.err::println); // todo proper logging
+                    biomePalette = dataresult.getOrThrow(); // todo proper logging
                 } else {
                     biomePalette = new PalettedContainer<>(biomeRegistry.asHolderIdMap(), biomeRegistry.getHolderOrThrow(Biomes.PLAINS), PalettedContainer.Strategy.SECTION_BIOMES, null);
                 }
@@ -134,7 +134,7 @@ public class SlimeChunkConverter {
                 if (!type.isEmpty()) {
                     BlockPos blockPosition = new BlockPos(tag.getInt("x"), tag.getInt("y"), tag.getInt("z"));
                     BlockState blockData = nmsChunk.getBlockState(blockPosition);
-                    BlockEntity entity = BlockEntity.loadStatic(blockPosition, blockData, (net.minecraft.nbt.CompoundTag) Converter.convertTag(tag));
+                    BlockEntity entity = BlockEntity.loadStatic(blockPosition, blockData, (net.minecraft.nbt.CompoundTag) Converter.convertTag(tag), net.minecraft.server.MinecraftServer.getServer().registryAccess());
 
                     if (entity != null) {
                         nmsChunk.setBlockEntity(entity);
diff --git a/src/main/java/com/infernalsuite/asp/level/SlimeLevelGenerator.java b/src/main/java/com/infernalsuite/asp/level/SlimeLevelGenerator.java
index b74ccd2b6b526f7b7955ce601a37185d3b6a2f59..5e72a283c9110a2a65939fda97c4e6f89a1b3755 100644
--- a/src/main/java/com/infernalsuite/asp/level/SlimeLevelGenerator.java
+++ b/src/main/java/com/infernalsuite/asp/level/SlimeLevelGenerator.java
@@ -1,6 +1,6 @@
 package com.infernalsuite.asp.level;
 
-import com.mojang.serialization.Codec;
+import com.mojang.serialization.MapCodec;
 import net.minecraft.core.Holder;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.BiomeSource;
@@ -21,7 +21,7 @@ public class SlimeLevelGenerator extends FlatLevelSource {
     private static BiomeSource getSource(Holder<Biome> biome) {
         return new BiomeSource() {
             @Override
-            protected Codec<? extends BiomeSource> codec() {
+            protected MapCodec<? extends BiomeSource> codec() {
                 return null;
             }
 
diff --git a/src/main/java/com/infernalsuite/asp/level/SlimeLevelInstance.java b/src/main/java/com/infernalsuite/asp/level/SlimeLevelInstance.java
index eddae8fc510d6e263df55a725148d96f677bcb0b..a8c103d435ac9473b1c5dd404e5c69ebf4353490 100644
--- a/src/main/java/com/infernalsuite/asp/level/SlimeLevelInstance.java
+++ b/src/main/java/com/infernalsuite/asp/level/SlimeLevelInstance.java
@@ -103,8 +103,6 @@ public class SlimeLevelInstance extends ServerLevel {
         super.setSpawnSettings(propertyMap.getValue(SlimeProperties.ALLOW_MONSTERS), propertyMap.getValue(SlimeProperties.ALLOW_ANIMALS));
 
         this.pvpMode = propertyMap.getValue(SlimeProperties.PVP);
-
-        this.keepSpawnInMemory = false;
     }
 
     @Override
@@ -123,7 +121,7 @@ public class SlimeLevelInstance extends ServerLevel {
 
                 //this.getChunkSource().save(forceSave);
                 this.serverLevelData.setWorldBorder(this.getWorldBorder().createSettings());
-                this.serverLevelData.setCustomBossEvents(MinecraftServer.getServer().getCustomBossEvents().save());
+                this.serverLevelData.setCustomBossEvents(MinecraftServer.getServer().getCustomBossEvents().save(MinecraftServer.getServer().registryAccess()));
 
                 // Update level data
                 net.minecraft.nbt.CompoundTag compound = new net.minecraft.nbt.CompoundTag();
